#!/usr/bin/python3
"""This module is uses unittest to test the file storage model / storage engine.
"""
import unittest
import os
from models.engine.file_storage import FileStorage
from models.user import User
from models.base_model import BaseModel
import json
from models.place import Place
from datetime import datetime
class TestFileStorage(unittest.TestCase):
    # Test class atrribute: __file_path, __objects.
    # Test all method
    # Test new method
    # Test save method
    # Test reload method
    def setUp(self):
        self.file_storage = FileStorage()
        # self.file_path = "file.json"
        
    def test_file_path(self):
        self.assertTrue(os.path.exists(self.file_storage._FileStorage__file_path))
        
    def test_objects(self):
        self.assertIsInstance(self.file_storage._FileStorage__objects, dict)
        
    def test_all_method(self):
        allObjects = self.file_storage.all()
        self.assertIsInstance(allObjects, dict)
        Objectlength = len(allObjects)
        
        # Testing that all() updates with  new object
        self.newObject = User()
        self.assertIn(self.newObject, allObjects.values())
        self.assertTrue(len(allObjects) == Objectlength + 1)
        
       
        self.newObject2 = User()
        self.assertIn(self.newObject2, allObjects.values())
        self.assertTrue(len(allObjects) == Objectlength + 2)
        
        # Testing if the object returned by all() is same as the value in __objects 
        self.assertEqual(self.file_storage.all(), self.file_storage._FileStorage__objects)
    
    def test_new_method(self):
        self.newObj = BaseModel()
        self.file_storage.new(self.newObj)
        
        __object_dict = {}
        objValue = self.newObj.to_dict()
        obj_key = '{}.{}'.format(self.newObj.__class__.__name__, str(self.newObj.id))
        __object_dict[obj_key] = objValue
        
        self.assertIn(obj_key, self.file_storage.all())
        self.assertIsInstance(__object_dict, dict)
        
    def test_save_method(self):
        self.new_Object = BaseModel()
        self.file_storage.save()
        self.obj_key = f"BaseModel.{str(self.new_Object.id)}"
        
        with open(self.file_storage._FileStorage__file_path, 'r') as jsonfile:
            jsonfile_content = jsonfile.read()
        
        self.assertIn(self.obj_key, jsonfile_content)
        
    def test_save(self):
        self.new_obj = BaseModel()
        self.new_obj.save()
        
        self.assertIsInstance(self.new_obj.created_at, datetime)
        
    # def test_reload_method(self):
    #     self.place = Place()
    #     self.file_storage.save()
    #     self.file_storage.reload()
        
    #     allObj = self.file_storage.all()
    #     # obj_key = f"Place.{self.place.id}"
        
    #     for key in allObj.keys():
    #         if key == f"Place.{self.place.id}":
    #             reloaded_obj = allObj[key]
        
    #     self.assertEqual(self.place.id, reloaded_obj.id)
    #     self.assertEqual(self.place.created_at, reloaded_obj.created_at)
    #     self.assertEqual(self.place.updated_at, reloaded_obj.updated_at)
    #     self.assertTrue(reloaded_obj, allObj)














    








def do_update(self, args):
        """This method updates an instance
        based on class name and id"""

        if not args:
            print("** class name missing **")
            return
        args = args.split()
        if len(args) < 4:
            print("** missing arguments **")
            return
        classname = args[0]
        if not searchClass(classname):
            print("** class doesn't exist **")
            return
        key = args[0] + "." + args[1]
        attrname = args[2]
        attrvalue = args[3]
        myData = models.storage.all()
        if key not in myData:
            print("** no instance found **")
            return
        instance = myData[key]
        if attrname in {"id", "created_at", "updated_at"}:
            print("** cannot update immutable attributes **")
            return
        existingVal = getattr(instance, attrname, None)
        if existingVal is None:
            print("** attribute doesn't exist **")
            return
        if isinstance(existingVal, str):
            setattr(instance, attrname, str(attrvalue))
        elif isinstance(existingVal, int):
            setattr(instance, attrname, int(attrvalue))
        elif isinstance(existingVal, float):
            setattr(instance, attrname, float(attrvalue))
        else:
            print("** attribute value is not valid **")
            return
        models.storage.save()